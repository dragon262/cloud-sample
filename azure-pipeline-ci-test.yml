# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- none
name: $(Date:yyyyMMdd).$(Rev:r)

variables:
  imageRepository: 'cloudsample'
  buildVersion: '$(Build.BuildNumber)'
  appVersion: '1.0.0'
  #tag: '$(Build.BuildId)'

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self
  persistCredentials: true
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |      
      echo "##vso[task.setvariable variable=appVersion;]`cat ./build.gradle | grep ^version | awk '{gsub("\047", "", $3); print $3}'`"

- task: MavenAuthenticate@0
  inputs:
    artifactsFeeds: 'ce-pg-stude-peed'
- task: Gradle@2
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build'
    publishJUnitResults: false
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.17'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: false

#- task: CopyFiles@2
#  displayName: 'Copy scripts'
#  inputs:
#    contents: 'build/libs/**'
#    targetFolder: '$(Build.ArtifactStagingDirectory)'

#- publish: '$(Build.ArtifactStagingDirectory)/build/libs'
#  displayName: 'Publish jar'
#  artifact: drop

- task: Docker@2
  inputs:
    containerRegistry: 'cepgbaseacr'
    repository: $(imageRepository)
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: |
      $(appVersion).$(buildVersion)

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'docker tag cepgbaseacr.azurecr.io/$(imageRepository):$(appVersion).$(buildVersion) cepgstapacr.azurecr.io/$(imageRepository):$(appVersion).$(buildVersion)'

- task: Docker@2
  inputs:
    containerRegistry: 'cepgstapacr'
    repository: $(imageRepository)
    command: 'push'
    tags: |
      $(appVersion).$(buildVersion)

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      git config --global user.name "BuildService"
      git config --global user.email "buildservice@pipeline.com"
      git tag -a $(appVersion).$(buildVersion) -m "Development Release"
      git push --tags
